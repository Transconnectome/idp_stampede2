#! /bin/bash
## usage: bash trac_2_tckgen -t 272


while [ $2 != -- ] ; do
  case $1 in
    -t)
      nthreads=$2;
      shift;;
    #-b)
    #  nbatch=$2;
    #  shift;;
   esac
    shift
done
IDP=/scratch/03263/jcha9928/data/idp/
logdir=/scratch/03263/jcha9928/data/idp//code/idp_stampede2/job
CMD_batch=$logdir/batch${nbatch}_5ttgen
#CMD2_batch=$logdir/batch${nbatch}_tckgen

rm -rf $CMD_batch
#rm -rf $CMD2_batch

#nthreadsX2=$((${nthreads}*2))


subjectlist=/scratch/03263/jcha9928/data/idp/data/list_subject_dti_t1.txt
for s in `cat $subjectlist`
do



CMD=$logdir/mrtrix2.${s}
rm -rf $CMD

echo "#!/bin/bash
source ~/.bashrc
FREESURFER_HOME=/work/03263/jcha9928/stampede2/app/freesurfer
source /work/03263/jcha9928/stampede2/app/freesurfer/FreeSurferEnv.sh
ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$nthreads
SUBJECT=${s}_1mm_flair
echo \$SUBJECT
#cd /ifs/scratch/pimri/posnerlab/1anal/IDP/fs/\${SUBJECT}/dmri2
cd $IDP/fs/\${SUBJECT}/dmri3
mkdir xfm

### flirt 
echo *****NOW GENERATING ANAT2DIFF.FLT.MAT ***** 
mri_convert ../mri/brain.mgz brain_anat_orig.nii.gz 
sleep 5

#/ifs/scratch/pimri/posnerlab/freesurfer_dev/freesurfer/bin/flip4fsl  brain_anat_orig.nii.gz brain_anat.nii.gz
orientLAS brain_anat_orig.nii.gz brain_anat.nii.gz  
sleep 5

mrconvert mr_meanb0.mif.gz mr_meanb0.nii.gz -force 
sleep 5

flirt -in brain_anat.nii.gz -ref mr_meanb0.nii.gz -out brain_anat2diff -omat anat2diff.flt.mat -v 
sleep 5


### 5TTGEN################################################################
echo ***** NOW 5TTGEN ***** 

mri_convert ../mri/T1.mgz /tmp/tmp.nii.gz && orientLAS /tmp/tmp.nii.gz T1_flip.nii.gz 
sleep 2

flirt -in T1_flip.nii.gz -out T1_2diff_flt.nii.gz -ref mr_meanb0.nii.gz -applyxfm -init anat2diff.flt.mat -v 

sleep 2

export FSLSUBALREADYRUN=true

##########################testing
5ttgen fsl T1_flip.nii.gz 5tt_t1.nii.gz -debug -force 
sleep 5

fslsplit 5tt_t1.nii.gz 5tt_t1_split -t
sleep 2

flirt -in 5tt_t1_split0000.nii.gz -ref mr_meanb0 -omat 5tt_to_diff.mat -out 5tt_diff 
sleep 2

for im in `imglob 5tt_t1_split000[0-9].nii.gz`; do
   flirt -in ${im} -out ${im}_diff -ref mr_meanb0 -applyxfm -init 5tt_to_diff.mat
   done
sleep 2
 
fslmerge -t 5tt_diff `imglob 5tt_t1_split000[0-9]_diff.nii.gz`
sleep 2


mrconvert 5tt_diff.nii.gz 5tt2.mif.gz -force -nthreads $nthreads 
sleep 2 

imcp 5tt_diff.nii.gz 5tt2.nii.gz
sleep 2
#############################################################

5tt2gmwmi 5tt2.mif.gz 5tt2_gmwmi_mask.mif.gz -nthreads $nthreads -force 
sleep 5

### APARC+ASEG to diff
for im in aparc+aseg aparc.a2009s+aseg
do
   echo ****NOW CONVERTING MGZ TO NII
   mri_convert ../mri/\${im}.mgz \${im}.nii.gz 
   sleep 5
   
   echo ****FLIPING FOR FSL
   orientLAS \${im}.nii.gz \${im}_flip.nii.gz 
   sleep 5
   
   echo ****NOW FLIRTING
   flirt -in \${im}_flip.nii.gz -out \${im}_2_diff_flt.nii.gz -ref mr_meanb0.nii.gz -applyxfm -init anat2diff.flt.mat -interp nearestneighbour 
   sleep 5

done


### labelconvert for aparc+aseg and aparc.a2009+aseg
labelconvert aparc+aseg_2_diff_flt.nii.gz $FREESURFER_HOME/FreeSurferColorLUT.txt /work/03263/jcha9928/stampede2/app/mrtrix3/share/mrtrix3/labelconvert/fs_default.txt nodes_aparc+aseg2.mif.gz -force
sleep 5

labelconvert aparc.a2009s+aseg_2_diff_flt.nii.gz $FREESURFER_HOME/FreeSurferColorLUT.txt  /work/03263/jcha9928/stampede2/app/mrtrix3/share/mrtrix3/labelconvert/fs_a2009s.txt \
nodes_aparc.a2009s+aseg2.mif.gz -force  
sleep 5
#labelsgmfix nodes.mif.gz T1_diff.nii.gz fs_default.txt nodes_fixSGM.mif.gz -sgm_amyg_hipp -premasked -verbose -nthreads 12


#### tckgen###############################################################
#rm -rf mr_track_20M.tck
tck=mr_track_10M_SIFT2.tck

rm $tck

if [ -e \$tck ]; then
tracknum=\`tckinfo $tck | grep max_num_tracks | grep -o 10000000\`
  if [ \$tracknum != 10000000 ]; then
  sleep 5
  echo tckgen....................................................................
  tckgen WM_FODs.mif.gz mr_track_20M.tck -act 5tt2.mif.gz -backtrack -crop_at_gmwmi -seed_dynamic WM_FODs.mif.gz -maxlength 250 -minlength 30 -select 20M -force -nthreads $nthreads 
  
  sleep 5
  echo tcksift....................................................................
  tcksift -act 5tt2.mif.gz mr_track_20M.tck WM_FODs.mif.gz \$tck -term_number 10M -force -nthreads $nthreads && echo 'sift done'******* 
  else 
  echo 'sift done'*******
  fi
else 

sleep 5
echo tckgen....................................................................
tckgen WM_FODs.mif.gz mr_track_20M.tck -act 5tt2.mif.gz -backtrack -crop_at_gmwmi -seed_dynamic WM_FODs.mif.gz -maxlength 250 -minlength 30 -select 20M -force -nthreads $nthreads

sleep 5
echo tcksift....................................................................
tcksift -act 5tt2.mif.gz mr_track_20M.tck WM_FODs.mif.gz \$tck -term_number 10M -force -nthreads $nthreads && echo 'sift done'******* 
fi
#### tck2connectome
for im in aparc+aseg aparc.a2009s+aseg
do
sleep 5
echo tck2connectome....................................................................
tck2connectome -force -zero_diagonal -nthreads $nthreads \$tck nodes_\${im}2.mif.gz mr_sift_10M_connectome_\${im}_count.csv  
sleep 2

tck2connectome -force -zero_diagonal -scale_length -stat_edge mean -nthreads $nthreads \$tck nodes_\${im}2.mif.gz mr_sift_10M_connectome_\${im}_length.csv  
sleep2

tck2connectome -force -zero_diagonal -scale_invnodevol -nthreads $nthreads \$tck nodes_\${im}2.mif.gz mr_sift_10M_connectome_\${im}_volumeadj.csv 
done
### save scratch space
#      if [ -e mr_sift_10M_connectome_aparc+aseg_count.csv ] ; then rm mr_track_100M.tck 
#      else echo SIFT WAS NOT SUCCESSFUL
#      fi
      
echo "END OF TCKGEN AND SIFT"
" > $CMD
echo "$CMD > ./job/out.o${s}" >> $CMD_batch
chmod +x $CMD

done

#$code/fsl_sub_hpc_36 $monk/data/cmd/cmd2_${s}  
#echo $jobid >> $monk/data/cmd/jobid

#$code/fsl_sub_hpc_1 -N connectome -s smp,$nthreads -j $prepid -l $logdir -t ${CMD2_batch}


split -l 30 $CMD_batch batchsplit

for b in `ls batchsplit*`
do
launch_script=/scratch/03263/jcha9928/data/idp/code/idp_stampede2/job/script_${b}

cat<<EOM > $launch_script
#!/bin/bash
#SBATCH -J mrtrix1           # Job name
#SBATCH -o ./job/mrx1.o%j       # Name of stdout output file
#SBATCH -e ./job/mrx1.e%j       # Name of stderr error file
#SBATCH -p normal          # Queue (partition) name
#SBATCH -N `wc -l $b | awk '{print $1}'`               # Total # of nodes
#SBATCH -n `wc -l $b | awk '{print $1}'`            # Total # of mpi tasks
#SBATCH -t 4:00:00        # Run time (hh:mm:ss)
#SBATCH --mail-user=cha.jiook@gmail.com
#SBATCH --mail-type=all    # Send email at begin and end of job
#SBATCH -A TG-IBN170015
# Other commands must follow all #SBATCH directives...
module list
pwd
date
module load launcher
sleep 3
export LAUNCHER_PLUGIN_DIR=\$LAUNCHER_DIR/plugins
export LAUNCHER_RMI=SLURM
export LAUNCHER_JOB_FILE=`echo $b`
# Launch MPI code...
\$LAUNCHER_DIR/paramrun
EOM

echo sbatch $launch_script
done

